{"version":3,"sources":["Comments.js","LineChart.js","App.js","serviceWorker.js","index.js"],"names":["Comments","props","className","items","map","item","index","key","name","rating","comment","LineChart","options","title","curveType","legend","position","hAxis","viewWindow","min","max","this","chartData","length","vAxis","chartType","width","height","data","React","Component","CustomerFeedback","changeHandler","event","target","value","setState","formControls","state","comments","email","userName","chartDataHeaders","handleSubmit","bind","preventDefault","allRatingsIndexed","forEach","push","nextValue","prevValue","chart","commentsSection","onSubmit","htmlFor","type","onChange","placeholder","required","starCount","onStarClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4975a831.chunk.js","sourcesContent":["import React from 'react';\n\n//\n// Comments list\n//\n\nconst Comments = props => (\n\n\t<ul className=\"comments__list\">\n\t\t{\n\t\t\tprops.items.map((item, index) => \n\t\t  \t\t<li className=\"comments__item\" key={index}>\n\t\t  \t\t\t<p className=\"giga bold below-8\">{item.name}</p>      \t\t\t\n\t\t  \t\t\t<p className=\"deca\">Rating: {item.rating} of 5</p>\n\t\t  \t\t\t<p>{item.comment}</p>\n\t\t  \t\t</li>\n\t\t  \t)\n\t\t}\n\t</ul>\n);\n\nexport default Comments;","import React from 'react';\nimport Chart from 'react-google-charts';\n\n//\n// Line Chart component based on react-google-charts npm package\n//\n\nclass LineChart extends React.Component {  \n\n \trender() {\n\n\t  \tconst options = {\n\t\t\t\ttitle: \"Rating Chart\",\n\t\t\t\tcurveType: \"function\",\n\t\t\t\tlegend: { position: \"bottom\" },\n\t\t\t\thAxis: { title: \"Comments count\", viewWindow: { min: 1 , max: this.props.chartData.length - 1}},\n\t\t\t\tvAxis: { title: \"Rating\", viewWindow: { min: 1, max: 5 } },\n\t\t}; \n\t    return <Chart\n\t            chartType=\"LineChart\"\n\t            width=\"100%\"\n\t            height=\"500px\"\n\t            data={this.props.chartData}\n\t            options={options} />;\n  \t}\n}\n\nexport default LineChart;","import React from 'react';\nimport Comments from './Comments';\nimport StarRatingComponent from 'react-star-rating-component';\n\nimport LineChart from './LineChart';\n\n\nclass CustomerFeedback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { // set default states\n      comments: [],\n      formControls: {\n          email: {\n            value: ''\n          },\n          userName: {\n            value: ''\n          },\n          comment: {\n            value: ''\n          }\n      },\n      rating: 1,\n      chartDataHeaders: [\"Comment index\", \"Rating\"],\n      chartData: []\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  changeHandler = event => {\n      \n      const name = event.target.name;\n      const value = event.target.value;\n    \n      this.setState({\n        formControls: {\n            ...this.state.formControls,\n            [name]: {\n            ...this.state.formControls[name],\n            value\n          }\n        }\n      });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); // stop form from submitting and do actions below\n\n        // loop through items array, create a new array and push to it an objecttt\n    // of type array with first value index and second value rating\n\n    const comments = [...this.state.comments, {\n        comment: this.state.formControls.comment.value, \n        name: this.state.formControls.userName.value, \n        rating: this.state.rating\n    }]\n\n    const allRatingsIndexed = [this.state.chartDataHeaders];\n    comments.forEach((comment, index) => allRatingsIndexed.push([index + 1, comment.rating]));\n    \n    // create an array of current properties tto be used by Comments, reset values in the form \n    this.setState({\n      comments: comments,\n      formControls: {\n          email: {\n            value: ''\n          },\n          userName: {\n            value: ''\n          },\n          comment: {\n            value: ''\n          }\n      },\n      chartData: allRatingsIndexed,\n      rating: 1\n    });\n  }\n\n  // handle star click\n  onStarClick(nextValue, prevValue, name) {\n    this.setState({rating: nextValue});\n  }\n\n  render() {\n\n    // render Chart only if it has rating data\n    let chart = '';\n\n    if (this.state.chartData.length > 1) { // length needs to be higher than 1 as the 1st value is the headings array \n      chart = <LineChart chartData={this.state.chartData}/>;\n    }\n\n    // render Comments section only if at least one comment was added\n    let commentsSection = '';\n\n    if (this.state.comments.length >= 1) {\n      commentsSection = \n        <div className=\"comments\">\n          <h2 className=\"below-16\">Latest comments:</h2>\n          <Comments items={this.state.comments} />\n        </div>;\n    }\n\n    return (\n      <div className=\"slab\">\n        <div className=\"container\">\n          <h1 className=\"below-16\">Customerr feedback</h1>\n          <div className=\"row\">\n            <div className=\"col-md-7\">\n              <form onSubmit={this.handleSubmit}>      \n                <label htmlFor=\"userName\" className=\"hidden\">Enter your email</label>\n                <input type=\"text\" name=\"userName\" value={this.state.formControls.userName.value} onChange={this.changeHandler} placeholder=\"Enter your name\" required />                \n                \n                <label htmlFor=\"email\" className=\"hidden\">Enter your name</label>\n                <input type=\"email\" name=\"email\" value={this.state.formControls.email.value} onChange={this.changeHandler} placeholder=\"Enter your email\" required />                \n                \n                <div className=\"below-16 top-24\">\n                  <h2 className=\"mega\">Please include your rating:</h2>\n                  <StarRatingComponent \n                    name=\"rate1\" \n                    starCount={5}\n                    value={this.state.rating}\n                    onStarClick={this.onStarClick.bind(this)}\n                  />\n                </div>\n                \n                <label htmlFor=\"comment\" className=\"hidden\">Enter your comment</label>\n                <textarea name=\"comment\" value={this.state.formControls.comment.value} onChange={this.changeHandler} placeholder=\"Please leave your comment\" required />\n                \n                <input type=\"submit\" value=\"Submit\" />\n              </form>\n            </div>\n            <div className=\"col-md-5\">\n              {chart}\n            </div>\n          </div>\n          {commentsSection}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <CustomerFeedback />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}